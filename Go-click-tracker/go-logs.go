package main

import (
	"flag"
	"fmt"
	"net/http"
	"path/filepath"
	"sync"
)

type FileTracker struct {
	clicks map[string]int
	mu     sync.Mutex
}

func NewFileTracker() *FileTracker {
	return &FileTracker{
		clicks: make(map[string]int),
	}
}

func (ft *FileTracker) TrackFile(file string) {
	ft.mu.Lock()
	defer ft.mu.Unlock()
	ft.clicks[file]++
	fmt.Printf("Click tracked for file: %s\n", file)
}

func (ft *FileTracker) GetClicks(file string) int {
	ft.mu.Lock()
	defer ft.mu.Unlock()
	return ft.clicks[file]
}

func main() {
	var port int
	flag.IntVar(&port, "port", 8080, "Port number for the server")
	flag.Parse()

	fileTracker := NewFileTracker()

	// Serve files from the current directory
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		// Get the requested file path
		filePath := "." + r.URL.Path

		// Serve the requested file
		http.ServeFile(w, r, filePath)

		// Track click for the served file
		fileTracker.TrackFile(filePath)
	})

	// Show statistics for all files
	http.HandleFunc("/stats", func(w http.ResponseWriter, r *http.Request) {
		fileTracker.mu.Lock()
		defer fileTracker.mu.Unlock()

		for file, clicks := range fileTracker.clicks {
			fmt.Fprintf(w, "File: %s, Clicks: %d\n", file, clicks)
		}
	})

	// Find all files in the current directory
	files, err := filepath.Glob("*")
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// Initialize click counts for all files
	for _, file := range files {
		fileTracker.clicks[file] = 0
	}

	fmt.Printf("Server running on port %d\n", port)
	http.ListenAndServe(fmt.Sprintf(":%d", port), nil)
}
