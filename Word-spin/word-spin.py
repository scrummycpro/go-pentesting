import tkinter as tk
from tkinter import ttk, filedialog
import sqlite3
from textblob import TextBlob
from textblob.tokenizers import WordTokenizer
from textblob import Word
from datetime import datetime

# Function to create SQLite database table
def create_table():
    conn = sqlite3.connect("sentiment_analysis.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS analysis_results
                 (id INTEGER PRIMARY KEY,
                 timestamp TEXT,
                 input_text TEXT,
                 lemmatized_text TEXT,
                 bi_grams TEXT,
                 tri_grams TEXT,
                 sentiment TEXT)''')
    conn.commit()
    conn.close()

# Function to insert analysis results into SQLite database
def insert_results(input_text, lemmatized_text, bi_grams, tri_grams, sentiment):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    conn = sqlite3.connect("sentiment_analysis.db")
    c = conn.cursor()
    c.execute('''INSERT INTO analysis_results 
                 (timestamp, input_text, lemmatized_text, bi_grams, tri_grams, sentiment) 
                 VALUES (?, ?, ?, ?, ?, ?)''',
                 (timestamp, input_text, lemmatized_text, bi_grams, tri_grams, sentiment))
    conn.commit()
    conn.close()

# Function to analyze sentiment and save results
def analyze_sentiment(event=None):
    text = text_entry.get("1.0", "end-1c")  # Get text from text entry widget
    blob = TextBlob(text, tokenizer=WordTokenizer())
    blob = blob.lower()
    
    # Perform semantic analysis (lemmatization)
    lemmatized_blob = ' '.join([Word(word).lemmatize() for word in blob.words])
    
    # Generate bi-grams and tri-grams
    bi_grams = blob.ngrams(n=2)
    tri_grams = blob.ngrams(n=3)
    
    sentiment = blob.sentiment.polarity
    if sentiment > 0:
        sentiment_label = "Positive"
    elif sentiment < 0:
        sentiment_label = "Negative"
    else:
        sentiment_label = "Neutral"

    # Display sentiment analysis result
    result_label.config(text=f"Sentiment: {sentiment_label}")

    # Insert analysis results into SQLite database
    insert_results(text, lemmatized_blob, str(list(bi_grams)), str(list(tri_grams)), sentiment_label)

# Function to handle file upload
def upload_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        with open(file_path, 'r') as file:
            text = file.read()
            text_entry.delete("1.0", "end")
            text_entry.insert("1.0", text)

# Create main window
root = tk.Tk()
root.title("Sentiment Analysis")

# Create text entry widget
text_entry = tk.Text(root, height=10, width=40, wrap="word")
text_entry.pack(pady=10)

# Bind right-click events for copy, paste, and save
text_entry.bind("<Button-3>", lambda e: text_entry.focus())
text_entry.bind("<Control-c>", lambda e: text_entry.event_generate("<<Copy>>"))
text_entry.bind("<Control-v>", lambda e: text_entry.event_generate("<<Paste>>"))

# Create analyze button
analyze_button = ttk.Button(root, text="Analyze Sentiment", command=analyze_sentiment)
analyze_button.pack()

# Create label to display result
result_label = ttk.Label(root, text="")
result_label.pack(pady=10)

# Bind Enter key to analyze sentiment button
root.bind("<Return>", analyze_sentiment)

# Create file upload button
upload_button = ttk.Button(root, text="Upload File", command=upload_file)
upload_button.pack()

# Create SQLite database table
create_table()

# Run the GUI
root.mainloop()
