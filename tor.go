package main

import (
	"bufio"
	"flag"
	"fmt"
	"net/http"
	"os"
	"sync"
	"time"
)

var (
	client = http.Client{
		Timeout: 10 * time.Second,
	}

	rateLimit = flag.Int("rate", 10, "Rate limit for HTTP requests (requests per second)")
)

func main() {
	flag.Parse()

	if len(flag.Args()) < 2 {
		fmt.Println("Usage: go run tor.go [-rate=<rate_limit>] <url> <directory_list_file> [<output_file>]")
		return
	}

	url := flag.Arg(0)
	directoryListFile := flag.Arg(1)
	outputFile := ""
	if len(flag.Args()) >= 3 {
		outputFile = flag.Arg(2)
	}

	fmt.Println("URL:", url)
	fmt.Println("Directory List File:", directoryListFile)
	fmt.Println("Output File:", outputFile)

	file, err := os.Open(directoryListFile)
	if err != nil {
		fmt.Println("Error opening directory list file:", err)
		return
	}
	defer file.Close()

	// Create a channel with capacity equal to the rate limit
	rateLimiter := make(chan time.Time, *rateLimit)
	for i := 0; i < *rateLimit; i++ {
		rateLimiter <- time.Now()
	}

	var wg sync.WaitGroup
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		directory := scanner.Text()
		<-rateLimiter // Wait for rate limiter
		wg.Add(1)
		go func() {
			defer wg.Done()
			checkDirectory(url, directory, outputFile)
			rateLimiter <- time.Now() // Release rate limiter
		}()
	}
	wg.Wait()
}

func checkDirectory(url, directory, outputFile string) {
	fullURL := url + "/" + directory
	resp, err := client.Get(fullURL)
	if err != nil {
		fmt.Printf("Error: %s - %s\n", fullURL, err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode == http.StatusOK {
		fmt.Printf("Success: %s\n", fullURL)
		if outputFile != "" {
			file, err := os.OpenFile(outputFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
			if err != nil {
				fmt.Printf("Error opening output file: %s\n", err)
				return
			}
			defer file.Close()
			fmt.Fprintf(file, "%s\n", fullURL)
		}
	}
}
