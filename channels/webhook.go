package main

import (
	"database/sql"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"net/http"

	_ "github.com/mattn/go-sqlite3"
)

type Payload struct {
	Name  string `json:"name"`
	Phone string `json:"phone"`
	Email string `json:"email"`
}

func ensureTableExists(db *sql.DB) error {
	_, err := db.Exec(`
		CREATE TABLE IF NOT EXISTS webhook_data (
			id INTEGER PRIMARY KEY,
			name TEXT,
			phone TEXT,
			email TEXT
		)
	`)
	return err
}

func webhookHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}

	var payload Payload
	err := json.NewDecoder(r.Body).Decode(&payload)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	log.Printf("Received webhook request for Name: %s, Phone: %s, Email: %s\n", payload.Name, payload.Phone, payload.Email)

	err = syncToDatabase(payload)
	if err != nil {
		log.Printf("Error syncing data to database: %v\n", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func syncToDatabase(payload Payload) error {
	db, err := sql.Open("sqlite3", "./webhook.db")
	if err != nil {
		return err
	}
	defer db.Close()

	// Ensure that the table exists
	if err := ensureTableExists(db); err != nil {
		return err
	}

	stmt, err := db.Prepare("INSERT INTO webhook_data (name, phone, email) VALUES (?, ?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()

	_, err = stmt.Exec(payload.Name, payload.Phone, payload.Email)
	if err != nil {
		return err
	}

	return nil
}

func main() {
	port := flag.String("port", "12345", "Port number to listen on")
	flag.Parse()

	http.HandleFunc("/webhook", webhookHandler)

	fmt.Printf("Listening on port %s...\n", *port)
	log.Fatal(http.ListenAndServe(":"+*port, nil))
}
